 #include <iostream>
#include <algorithm>
#include <map>
using namespace std;

void merge(int input[],int start,int mid,int end){
    
    int i=0,j=0,k=start;
    int n1=mid-start+1;
    int n2=end-mid;
    
    int L[n1],R[n2];
    
    for(int i=0;i<n1;i++){
        L[i]=input[i+start];
    }
    
    for(int j=0;j<n2;j++){
        R[j]=input[j+mid+1];
    }
    
    while(i<n1  && j<n2){
        
        if(L[i]<R[j]){
            
            input[k]=L[i];
            i++;
        }
        
        else{
            
            input[k]=R[j];
            j++;
        }
        
        k++;
    }
    
    while(i<n1){
        input[k]=L[i];
        i++;
        k++;
    }
    
    while(j<n2){
        input[k]=R[j];
        j++;
        k++;
    }
    
}


void mergeSorts(int input[],int start,int end ){
    
    if(start>=end){
        return;
    }
    
    int mid=(start+end)/2;
    
    mergeSorts(input,start,mid);
    mergeSorts(input,mid+1,end);
    
    merge(input,start,mid,end);
    
}
void mergeSort(int input[],int size){
    
    mergeSorts(input,0,size-1); 
    
}


void intersection(int input1[], int input2[], int size1, int size2) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Print the output and don't return it.
     * Taking input is handled automatically.
     */
    
    
    
    mergeSort(input1,size1);
    mergeSort(input2,size2);
    int i=0, j=0;
  while((i<size1)&&(j<size2))
{
      if(input1[i]==input2[j])
      {  
          cout<<input1[i]<<endl;
          i++;
          j++;
      }
    else if(input1[i]<input2[j])
           i++;
    else
        j++;
    
    
}
    return;
    }




int main() {

	int size1,size2;

	cin>>size1;
	int *input1=new int[1+size1];	
	
	for(int i=0;i<size1;i++)
		cin>>input1[i];

	cin>>size2;
	int *input2=new int[1+size2];	
	
	for(int i=0;i<size2;i++)
		cin>>input2[i];
	
	
	intersection(input1,input2,size1,size2);

		
	return 0;
}
